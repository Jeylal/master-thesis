# Appendix

```{r import aggregate data}
#| warning: false
#| message: false
#| echo: false
#| include: false
aggregate_data_ch <- read_excel("data/aggregate_data_ch.xlsx", sheet = 3)

vox <- 
  vox %>% 
  left_join(aggregate_data_ch, by = c("annee" = "year"))
```

```{r functions}
#| echo: false
#| warning: false
#| echo: false
jmer <- function(formula, data, REML=TRUE){
    # to simplify maintainence here (in the hopes of turning this into a real
    # package), I'm depending on JellyMe4, which copies the dataframe back with
    # the model this is of course what you want if you're primarily working in
    # Julia and just using RCall for the the R ecosystem of extras for
    # MixedModels, but it does create an unnecessary copy if you're starting
    # with your data in R.
    #
    # Also, this means we suffer/benefit from the same level of compatibility in
    # the formula as in JellyMe4, i.e. currently no support for the ||

    jf <- deparse(formula,width = 500)
    jreml = ifelse(REML, "true", "false")

    julia_assign("jmerdat",data)
    julia_command(sprintf("jmermod = fit!(LinearMixedModel(@formula(%s),jmerdat),REML=%s);",jf,jreml))

    julia_eval("robject(:lmerMod, Tuple([jmermod,jmerdat]));",need_return="R")
}

ame <- function(model, group, term1, term2){
  
  pred_model_term1 <- 
  {{model}} %>% 
    avg_slopes(variables = {{term1}}, b = {{group}})
  
  pred_model_term2 <- 
  {{model}} %>% 
    avg_slopes(variables = {{term2}}, b = {{group}})  
  
  data <- rbind(pred_model_term1, pred_model_term2)
  
}

comp <- function(model, term1, term2, group){
  
  comp1 <- 
  {{model}} %>% 
    avg_comparisons(variables = {{term1}}, by = {{group}})
  
  comp2 <- 
    {{model}} %>% 
    avg_comparisons(variables = {{term2}}, by = {{group}})
  
  data <- rbind(comp1, comp2)
  
}

ame_plot <- function(data){
  
  {{data}} %>% 
  ggplot()+
  aes(x = annee_cat, y = estimate, color = term, shape = term)+
  geom_point()+
  geom_pointrange(aes(ymin = conf.low, ymax = conf.high))+
  theme_bw()+
  geom_hline(yintercept = 0)+
  scale_y_continuous(labels = scales::percent())
}
```

```{r missing value check}
#| echo: false
#| message: false
#| warning: false
#| include: false
vox %>% 
  group_by(annee) %>% 
  count(is.na(val5)) %>% 
  mutate(prop = n/sum(n)) %>% 
  filter(`is.na(val5)` == TRUE) %>% 
  ungroup()
freq(vox$p02)
freq(vox$no_party)
```


```{r set up}
#| echo: false
#| warning: false
#| message: false

library(irr)
library(JuliaCall)
library(JuliaConnectoR)
library(tidyverse)
library(haven)
library(quarto)
library(sjlabelled)
library(readr)
library(readxl)
library(haven)
library(viridis)
library(stargazer)
library(gtsummary)
library(gt)
library(brms)
library(ggrepel)
library(cowplot)
library(ggpubr)
library(lme4)
library(prediction)
library(marginaleffects)
library(ggeffects)
library(ordinal)
library(broom)
library(knitr)
library(readr)
library(gtExtras)
library(broom.mixed)
library(GGally)
library(questionr)
library(car)
library(effects)
library(sjPlot)
library(margins)
library(cAIC4)
library(ordinal)
library(pacman)
library(easystats)
```


```{r selects recoding}
#| echo: false
#| warning: false
#| message: false

selectscum <- read_sav("data/495_Selects_CumulativeFile_Data_1971-2019_v2.3.0.sav")

selects <- 
  selectscum %>% 
  mutate(
    pss = if_else(pid2b == 3, 1,
                  if_else(is.na(pid2b), NA, 0)),
    plr = if_else(pid2b %in% c(1, 5), 1,
                  if_else(is.na(pid2b), NA, 0)),
    pdc = if_else(pid2b == 2, 1,
                  if_else(is.na(pid2b), NA, 0)),
    udc = if_else(pid2b == 4, 1,
                  if_else(is.na(pid2b), NA, 0)),
    abstention = if_else(pid2b == 0, 1, 
                         if_else(is.na(pid2b), NA, 0)),
    education = case_when(
      educ %in% c(1, 2, 3) ~ "low_education", #primary school to basic vocational training
      educ %in% c(4, 5, 6) ~ "middle_education",#vocational, high and diploma school
      educ %in% c(7, 8) ~ "higher_voc_training",
      educ %in% c(9) ~ "university"
    ),
    income_centered = income - 3,
    age_cat = cut(age, c(18, 30, 45, 65, 99), include.lowest = TRUE, right = FALSE),
    canton = as.factor(as_character(sg2)),
    annee = as.factor(year),
    religionf = as.factor(as_character(religion)),
    gender = as.factor(as_character(sex))
  )
freq(selects$income)
freq(selects$income_centered)
```

```{r selects regression 1971}
#| echo: false
#| warning: false
#| message: false
selects1970s <-  
  selects %>% 
  filter(year %in% c(1971, 1975))

selects1975 <- 
  selects %>% filter(annee == 1975)

selects1975$kriesi_new <- factor(as_character(selects1975$sch7a))

selects1971$classKriesi <- as.factor(as_character(selects1971$sc7b))

selects1970s <- 
  selects1970s %>% 
  mutate(
    class_kriesi = case_when(
      sch7a == 1 | sch7r == 1 ~ "farmers",
      sch7a == 2 | sch7r == 2 ~ "other_selfemployed",
      sch7a == 3 | sch7r == 3 ~ "semiskilled_unskilled_workers",
      sch7a == 4 | sch7r == 4 ~ "skilled_workers_&_foremen",
      sch7a == 5 | sch7r == 5 ~ "routine_nonmanual_workers",
      sch7a %in% c(6,7,8) | sch7r == 6 ~ "service_class_employees"
    ),
    languagef = factor(as_character(language))
  )

selects1970s$class_kriesi = relevel(factor(selects1970s$class_kriesi), ref = "semiskilled_unskilled_workers")

selects1970s$education = relevel(factor(selects1970s$education), ref = "low_education")

freq(selects1970s$lr1)



selects1971_5 <- 
  selects1970s %>% filter(annee %in% c(1971,1975))

summary(plr <- glm(data = selects1971_5, 
                         plr ~ class_kriesi + age_cat + gender + educ,
                         family = binomial(link = "probit")))

summary(schwarz <- glm(data = selects1971_5, 
                         factor(ip8) ~ class_kriesi + age_cat + gender + educ + as_character(sg1),
                         family = binomial(link = "probit")))

summary(income_distr <- glm(data = selects1971_5, 
                         factor(ip6) ~ class_kriesi + age_cat + gender + education + as_character(sg1),
                         family = binomial(link = "probit")))

summary(distribution <- glm(data = selects1970s, 
                         factor(ip7) ~ class_kriesi + age_cat,
                         family = binomial(link = "probit")))
tab_model(income_distr)

```


```{r selects regressions}
#| echo: false
#| include: false


selects_filt <- 
  selects %>% 
  filter(year %in% c(1975, 1979, 1995, 1999, 2003, 2007, 2011, 2015, 2019))

glmer_pss_selects <- 
  selects %>% 
  filter(year %in% c(1975, 1979, 1995, 1999, 2003, 2007, 2011, 2015, 2019)) %>% 
  split(.$year) %>% 
  map(~ glmer(pss ~ 1 + income_centered + education + gender + age_cat + religionf + (1 | canton),
              data = .x, family = binomial(link = "probit")))


ame <- 
glmer_pss_selects %>% 
  map(~comparisons(.x ,variables = list(education = c("low_education", "university")))) %>% 
  map_df(~summarise(.x, ame = mean(estimate),
            high = mean(conf.high),
            low = mean(conf.low))) %>% 
           mutate(year = c(1975, 1979, 1995, 1999, 2003, 2007, 2011, 2015, 2019),
                  variable = "education")

glmer_pss_selects2 <- glmer(pss ~ 1 + income_centered + education + gender + age_cat + religionf + lr1 + (1 | canton) + (income_centered + education| year), family = binomial(link = "probit"), data = selects_filt,
                             control = glmerControl(calc.derivs = FALSE, optimizer = "nloptwrap"))

tab_model(glmer_pss_selects2)
glmer_pss_selects2 %>% 
  comparisons(variables = list(education = c("low_education", "university")), by = "canton")

glmer_pss_selects2 %>% 
  avg_slopes(variables = c("income_centered", "canton"), allow.new.levels = TRUE)

tab_model(glmer_pss_selects2)

```



```{r import selects cumulative}
#| echo: false
#| warning: false
#| message: false
selects <- read_sav("data/495_Selects_CumulativeFile_Data_1971-2019_v2.3.0.sav")
selects1995 <- read_sav("data/selects1995_recoded.sav")
freq(selects1995$val2)
selects1995$age_cat <- as.factor(as_character(selects1995$age_cat))
selects1995$income_hh <- as.factor(as_character(selects1995$income_hh))
selects1995$educ <- as.factor(as_character(selects1995$educ))
selects1995$language <- as.factor(as_character(selects1995$language))
selects1995$val2 <- ordered(selects1995$val2)
selects1995$class <- as.factor(as_character(selects1995$classh))

selects1995$educ <- relevel(selects1995$educ, ref = "vocational education")
selects1995$income_hh <- relevel(selects1995$income_hh, ref = "medium income")
selects1995$val4 <- ordered(selects1995$val4)
selects1995$val3 <- ordered(selects1995$val3)
selects1995$val8 <- ordered(selects1995$val8)
selects1995$symp_pdc <- ordered(selects1995$q42_1)
selects1995$symp_prd <- ordered(selects1995$q42_3)
selects1995$symp_greens <- ordered(selects1995$q42_4)
selects1995$symp_poppdt <- ordered(selects1995$q42_5)
selects1995$symp_udc <- ordered(selects1995$q42_6)
selects1995$symp_ps <- ordered(selects1995$q42_7)
selects1995$symp_pls <- ordered(selects1995$q42_8lps)


library(ordinal)
summary(socspend <- clm(data = selects1995,
                           val2 ~ income_hh + educ + gender + age_cat + language,
                           link = c("probit")))

summary(chances_foreign <- clm(data = selects1995,
                           val4 ~ income_hh + educ + gender + age_cat + language,
                           link = c("probit")))

summary(ue <- clm(data = selects1995,
                           val3 ~ income_hh + educ + gender + age_cat + language,
                           link = c("probit")))
summary(taxesHihgInc <- clm(data = selects1995,
                           val8 ~ income_hh + educ + gender + age_cat + language,
                           link = c("probit")))


symp_pdc <- clm(data = selects1995,
                           symp_pdc ~ income_hh + educ + gender + age_cat + language,
                           link = c("probit"))
symp_prd <- clm(data = na.omit(selects1995[c("symp_prd", "income_hh", "educ", "gender", "age_cat", "language")]),
                           symp_prd ~ income_hh + educ + gender + age_cat + language,
                           link = c("probit"))
symp_udc <- clm(data = selects1995,
                           symp_udc ~ income_hh + educ + gender + age_cat + language,
                           link = c("probit"))
symp_ps <- clm(data = selects1995,
                           symp_ps ~ income_hh + educ + gender + age_cat + language,
                           link = c("probit"))

symp_greens <- clm(data = selects1995,
                           symp_greens ~ income_hh + educ + gender + age_cat + language,
                           link = c("probit"))

symp_pls <- clm(data = na.omit(selects1995[c("symp_pls", "income_hh", "educ", "gender", "age_cat", "language")]),
                           symp_pls ~ income_hh + educ + gender + age_cat + language,
                           link = c("probit"))

tab_model(socspend, chances_foreign, ue, taxesHihgInc)
tab_model(symp_pdc, symp_prd, symp_udc, symp_ps, symp_greens)

step_prd <- step(symp_prd, direction = "backward")
summary(step_prd)
```

```{r}
freq(selects$ip13)
```


```{r}
regsocspend <- clm(data = selects, ordered(ip13) ~ factor(income_hh) + education + gender + age_cat + annee + factor(income):annee)

regsocspend_clmm <- clmm(data = selects[selects$annee %in% c(1995, 1999, 2007, 2011, 2015, 2019),], 
                         ordered(ip13) ~ factor(income) + education + gender + age_cat + (1 | annee) + (1 | canton),
                         link = "probit", Hess = TRUE, na.action = na.omit,
                         control = clmm.control(method = "nlminb", grtol=1e-6))
summary(regsocspend)
summary(regsocspend_clmm)
```






```{r jglmm test}
#| echo: false
#| include: false

library(jglmm)

jglmm_setup()
gm <- jglmm(pss ~ 1 + incomef + ( 1 | canton), data = vox, family = "binomial")
```


```{r julia code}
#| echo: false
#| message: false
#| warning: false
#| include: false
dyn.load("C:/Users/celal/AppData/Local/Programs/Julia-1.9.3/bin/libopenlibm.DLL")
julia.dir <- julia_setup(JULIA_HOME = "C:/Users/celal/AppData/Local/Programs/Julia-1.9.3/bin")
julia.dir <- julia_setup(JULIA_HOME = "C:/Users/celal/AppData/Local/Programs/Julia-1.9.3/bin")

julia_library("MixedModels")
julia_library("RCall")
julia_library("JellyMe4")

julia.dir$library("MixedModels")
julia.dir$assign("vox", vox)
julia.dir$assign("form", formula(pss ~ 1 + incomef + educationf + age_cat + gender + religion + ( incomef + educationf + age_cat + gender + religion | canton) + ( incomef + educationf + age_cat + gender + religion | annee_cat)))
results <- julia.dir$eval("res = fit(MixedModel, form, vox, Bernoulli())", need_return = c("Julia"))
res <- julia.dir$eval("res")
julia_setup()
beta.random = t(julia_eval("ranef(res)")[1])

julia_assign("vox", vox)

blblb <- julia_command("@time fm1 = fit!(LinearMixedModel(@formula(pss ~ incomef + educationf + age_cat + gender + (incomef + educationf | canton/annee_cat)), vox))")

library(optimx)
fit = glmer(pss ~ incomef + educationf + age_cat + gender + (incomef + educationf | canton/annee_cat), data = vox,
            control = lme4::glmerControl(optimizer = "optimx", calc.derivs = FALSE, optCtrl = list(method = "nlminb", starttests = FALSE, kkt = FALSE)), family = binomial(link = "probit"))
summary(fit)
```

```{r run party glmer}
#| echo: false


glmer_ps <- glmer(data = vox, 
                          pss ~ incomef + educationf + age_cat + gender + religion + house_ownership + (incomef + educationf | annee_f) + (incomef + educationf | canton),
                          family = binomial(link = "probit"),
                          nAGQ = 0, control = glmerControl(calc.derivs = FALSE, optimizer = "nloptwrap"))


glmer_udc <- glmer(data = vox, 
                          udc ~ incomef + educationf + age_cat + gender + religion + house_ownership + (incomef + educationf | annee_f) + (incomef + educationf | canton),
                          family = binomial(link = "probit"),
                          nAGQ = 0, control = glmerControl(calc.derivs = FALSE, optimizer = "nloptwrap"))

glmer_plr <- glmer(data = vox, 
                          plr ~ incomef + educationf + age_cat + gender + religion + house_ownership + (incomef + educationf | annee_f) + (incomef + educationf | canton),
                          family = binomial(link = "probit"),
                          nAGQ = 0, control = glmerControl(calc.derivs = FALSE, optimizer = "nloptwrap"))

glmer_pdc <- glmer(data = vox, 
                          pdc_pcs ~ incomef + educationf + age_cat + gender + religion + house_ownership + (incomef + educationf | annee_f) + (incomef + educationf | canton),
                          family = binomial(link = "probit"),
                          nAGQ = 0, control = glmerControl(calc.derivs = FALSE, optimizer = "nloptwrap"))

glmer_greens <- glmer(data = vox, 
                          green ~ incomef + educationf + age_cat + gender + religion + house_ownership + (incomef + educationf | annee_f) + (incomef + educationf | canton),
                          family = binomial(link = "probit"),
                          nAGQ = 0, control = glmerControl(calc.derivs = FALSE, optimizer = "nloptwrap"))

glmer_noparty <- glmer(data = vox, 
                          no_party ~ incomef + educationf + age_cat + gender + religion + house_ownership + (incomef + educationf | annee_f) + (incomef + educationf | canton),
                          family = binomial(link = "probit"),
                          nAGQ = 0, control = glmerControl(calc.derivs = FALSE, optimizer = "nloptwrap"))

tab_model(glmer_udc, glmer_udc2, glmer_udc3,
          transform = NULL, show.aic = TRUE)
ameps <- 
glmer_ps %>% 
  avg_slopes()
r2_nakagawa(glmer_plr, tolerance = 1e-1000)
icc(glmer_plr, tolerance = 1e-1000)

library(VGAM)
library(MASS)

tab_model(glmer_ps)
Anova(glmer_ps2)
```




```{r}
reg_ps <- glm(data = na.omit(vox[c("pss","income","education","annee_cat","gender","age_cat","religion","regionL")]), pss ~ income*education*annee_cat*gender*age_cat + religion + regionL, family = binomial(link = "logit"))
vox %>% 
  group_by(annee) %>% 
  count(income) %>% 
  mutate(prop = n/sum(n)) %>% 
  ungroup()
NagelkerkeR2(reg_pdc)

plot(reg_ps)

reg_ps <- glm(data = na.omit(vox[c("pss","income","education","annee_cat","gender","age_cat","religion","regionL")]), pss ~ income*education*annee_cat*gender*age_cat + religion + regionL, family = binomial(link = "logit"))

summary(reg_ps)
reg_udc <- glm(data = vox, udc ~ income*education*annee_cat*gender*age_cat*religion*regionL, family = binomial(link = "logit"))

reg_psf <- glm(data = vox, pss ~ incomef*educationf*annee_cat + gender + age_cat + religion + regionL, family = binomial(link = "logit"))

reg_plr <- glm(data = vox, plr ~ income*education*annee_cat + gender + age_cat + religion + regionL, family = binomial(link = "logit"))

reg_pdc <- glm(data = vox, pdc_pcs ~ income*education*annee_cat + gender + age_cat + religion + regionL, family = binomial(link = "logit"))

anova(reg_ps2, reg_ps3, test = "Chisq")
plot(reg_ps3)


ameps_inc <- 
  reg_ps %>% 
  avg_slopes(variables = c("income"), by = "annee_cat")

ameps_educ <- 
  reg_ps %>% 
  avg_slopes(variables = c("education"), by = "annee_cat")

ameps <- rbind(ameps_inc, ameps_educ)

ameps %>% 
ggplot()+
  aes(x = annee_cat, y = estimate, color = term, shape = term)+
  geom_point()+
  geom_pointrange(aes(ymin = conf.low, ymax = conf.high))+
  geom_hline(yintercept = 0)


ameudc_inc <- 
  reg_udc %>% 
  avg_slopes(variables = c("income"), by = "annee_cat")

ameudc_educ <- 
  reg_udc %>% 
  avg_slopes(variables = c("education"), by = "annee_cat")

ameudc <- rbind(ameudc_educ, ameudc_inc)

ameudc %>% 
ggplot()+
  aes(x = annee_cat, y = estimate, color = term, shape = term)+
  geom_point()+
  geom_pointrange(aes(ymin = conf.low, ymax = conf.high))+
  geom_hline(yintercept = 0)


ameplr_inc <- 
  reg_plr %>% 
  avg_slopes(variables = c("income"), by = "annee_cat")

ameplr_educ <- 
  reg_plr %>% 
  avg_slopes(variables = c("education"), by = "annee_cat")

ameplr <- rbind(ameplr_educ, ameplr_inc)

ameplr %>% 
ggplot()+
  aes(x = annee_cat, y = estimate, color = term, shape = term)+
  geom_point()+
  geom_pointrange(aes(ymin = conf.low, ymax = conf.high))+
  geom_hline(yintercept = 0)

amepdc_inc <- 
  reg_pdc %>% 
  avg_slopes(variables = c("income"), by = "annee_cat")

amepdc_educ <- 
  reg_pdc %>% 
  avg_slopes(variables = c("education"), by = "annee_cat")

amepdc <- rbind(amepdc_educ, amepdc_inc)

amepdc %>% 
ggplot()+
  aes(x = annee_cat, y = estimate, color = term, shape = term)+
  geom_point()+
  geom_pointrange(aes(ymin = conf.low, ymax = conf.high))+
  geom_hline(yintercept = 0)
```



```{r}
voxlr %>% 
  group_by(annee_cat) %>% 
  count(incomef) %>% 
  mutate(prop = n/sum(n)) %>% 
  ungroup() %>% 
  ggplot()+
  aes(x = incomef, y = prop)+
  geom_col()+
  facet_wrap(~annee_cat)

vox %>% 
  group_by(annee) %>% 
  count(is.na(tmenage)) %>% 
  mutate(prop = n/sum(n)) %>% 
  ungroup()
```




```{r}
## simple model:
fm1 <- clm(rating ~ contact + temp, data=wine)
summary(fm1)

## Fitted values with standard errors and confidence intervals:
predict(fm1, se.fit=TRUE, interval=TRUE) # type="prob"
## class predictions for the observations:
predict(fm1, type="class")

newData <- expand.grid(temp = c("cold", "warm"),
                       contact = c("no", "yes"))

## Predicted probabilities in all five response categories for each of
## the four cases in newData:
predict(fm1, newdata=newData, type="prob")
## now include standard errors and intervals:
predict(fm1, newdata=newData, se.fit=TRUE, interval=TRUE, type="prob")
freq(vox$val11)
```













